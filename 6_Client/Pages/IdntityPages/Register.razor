@page "/register"
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@using System.ComponentModel.DataAnnotations

<div class="IH9">
    <CascadingAuthenticationState>
        <TelerikWizard @bind-Value="@IndexValue" Height="100%">
            <WizardSteps>
                <WizardStep Label="Registration">
                    <Content>
                        <h2>Registration Form</h2>
                        <TelerikForm EditContext="@RegistrationEditContext">
                            <FormButtons> </FormButtons>
                        </TelerikForm>
                    </Content>
                </WizardStep>
                <WizardStep Label="Terms">
                    <Content>
                        <h2>Terms and conditions</h2>

                        <TelerikForm Model="@TermsModel" Orientation="FormOrientation.Horizontal">
                            <FormValidation>
                                <DataAnnotationsValidator></DataAnnotationsValidator>
                            </FormValidation>
                            <FormButtons> </FormButtons>
                        </TelerikForm>
                    </Content>
                </WizardStep>
                <WizardStep Label="Finish">
                    <Content>
                        <h2>The registration is completed</h2>
                    </Content>
                </WizardStep>
            </WizardSteps>
            <WizardButtons>
                @{
                    var index = context;
                    switch (index)
                    {
                        case 0:
                            {
                                <TelerikButton ButtonType="ButtonType.Button" OnClick="@OnClear">Reset Form</TelerikButton>
                                <TelerikButton ButtonType="ButtonType.Button" Primary="true" OnClick="@(() => IndexValue += 1)">Next</TelerikButton>
                                break;
                            }
                        case 1:
                            {
                                <TelerikButton ButtonType="ButtonType.Button" OnClick="@(() => IndexValue -= 1)">Previous</TelerikButton>
                                <TelerikButton ButtonType="ButtonType.Submit" OnClick="@HandleRegistration">ConfirmRegistration</TelerikButton>
                                break;
                            }
                        case 2:
                            {
                                <TelerikButton ButtonType="ButtonType.Button" OnClick="@OnClear">Reset Form</TelerikButton>
                                break;
                            }

                    }
                }
            </WizardButtons>
        </TelerikWizard>
    </CascadingAuthenticationState>
</div>

@code {
    public int IndexValue { get; set; }
    public Terms TermsModel { get; set; } = new Terms();
    
    private RegisterModelDto _registerModel = new RegisterModelDto();

    public EditContext RegistrationEditContext { get; set; }

    protected override void OnInitialized()
    {
        InitRegistration();
        base.OnInitialized();
    }

    private void OnClear()
    {
        _registerModel = new RegisterModelDto();
        InitRegistration();
    }

    private void InitRegistration()
    {
        RegistrationEditContext = new EditContext(_registerModel);
    }

   
    private async Task HandleRegistration()
    {

        var result = await AuthService.Register(_registerModel);

        if (result.Successful)
        {
            Notification.Instance.Show(new NotificationModel()
            {
                Text = "Post Added Successfully",
                ThemeColor = ThemeColors.Success,
                CloseAfter = 5000,
                Closable = true
            });
            NavigationManager.NavigateTo("/login");
        }

    }
}



@*@page "/register"
    @inject IAuthService AuthService
    @inject NavigationManager NavigationManager

    <h1>Register</h1>

    @if (ShowErrors)
    {
        <div class="alert alert-danger" role="alert">
            @foreach (var error in Errors)
                        {
                <p>@error</p>
            }
        </div>
    }

    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Please enter your details</h5>
            <EditForm Model="RegisterModel" OnValidSubmit="HandleRegistration">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="email">Email address</label>
                    <InputText Id="email" class="form-control" @bind-Value="RegisterModel.Email" />
                    <ValidationMessage For="@(() => RegisterModel.Email)" />
                </div>
                <div class="form-group">
                    <label for="password">Password</label>
                    <InputText Id="password" type="password" class="form-control" @bind-Value="RegisterModel.Password" />
                    <ValidationMessage For="@(() => RegisterModel.Password)" />
                </div>
                <div class="form-group">
                    <label for="confirmPassword">Confirm Password</label>
                    <InputText Id="confirmPassword" type="password" class="form-control" @bind-Value="RegisterModel.ConfirmPassword" />
                    <ValidationMessage For="@(() => RegisterModel.ConfirmPassword)" />
                </div>
                <button type="submit" class="btn btn-primary">Submit</button>
            </EditForm>
        </div>
    </div>

    @code {

        private RegisterModelDto RegisterModel = new RegisterModelDto();
                    private bool ShowErrors;
                    private IEnumerable<string> Errors;

                    private async Task HandleRegistration()
                    {
                        ShowErrors = false;

                        var result = await AuthService.Register(RegisterModel);

                        if (result.Successful)
                        {
                            NavigationManager.NavigateTo("/login");
                        }
                        else
                        {
                            Errors = result.Errors;
                            ShowErrors = true;
                        }
                    }

    }*@