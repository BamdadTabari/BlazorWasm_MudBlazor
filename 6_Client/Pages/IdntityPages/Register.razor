@page "/register"

<div class="IH9">
    <CascadingAuthenticationState>
        <TelerikWizard @bind-Value="@IndexValue" Height="100%">
            <WizardSteps>
                <WizardStep Label="Registration">
                    <Content>
                        <h2>Registration Form</h2>
                        <TelerikForm EditContext="@RegistrationEditContext">
                            <FormValidation>
                                <DataAnnotationsValidator></DataAnnotationsValidator>
                            </FormValidation>
                            <FormButtons> </FormButtons>
                        </TelerikForm>
                    </Content>
                </WizardStep>
                <WizardStep Label="Terms">
                    <Content>
                        <h2>Terms and conditions</h2>
                        <TelerikForm Model="@TermsModel" Orientation="FormOrientation.Horizontal">
                            <FormValidation>
                                <DataAnnotationsValidator></DataAnnotationsValidator>
                            </FormValidation>
                            <FormButtons> </FormButtons>
                        </TelerikForm>
                    </Content>
                </WizardStep>
                <WizardStep Label="Finish">
                    <Content>
                        <h2>The registration is completed</h2>
                    </Content>
                </WizardStep>
            </WizardSteps>
            <WizardButtons>
                @{
                    var index = context;
                    switch (index)
                    {
                        case 0:
                            <TelerikButton ButtonType="ButtonType.Button" OnClick="@OnClear">Reset Form</TelerikButton>
                            <TelerikButton ButtonType="ButtonType.Button" Primary="true" OnClick="@(() => IndexValue += 1)">Next</TelerikButton>
                            break;
                        case 1:
                            <TelerikButton ButtonType="ButtonType.Button" OnClick="@(() => IndexValue -= 1)">Previous</TelerikButton>
                            <TelerikButton ButtonType="ButtonType.Submit" OnClick="@HandleRegistration">ConfirmRegistration</TelerikButton>
                            break;
                        case 2:
                            <TelerikButton ButtonType="ButtonType.Button" OnClick="@OnClear">Reset Form</TelerikButton>
                            break;
                    }
                }
            </WizardButtons>
        </TelerikWizard>
    </CascadingAuthenticationState>
</div>
@code {

    #region Props

    private int IndexValue { get; set; }
    private Terms TermsModel { get; set; } = new Terms();
    private RegisterModelDto _registerModel = new RegisterModelDto();
    public EditContext RegistrationEditContext { get; set; }

    #endregion

    #region Actions
    protected override void OnInitialized()
    {
        InitRegistration(); base.OnInitialized();
    }
    private void OnClear()
    {
        _registerModel = new RegisterModelDto(); InitRegistration();
    }
    private void InitRegistration() => RegistrationEditContext = new EditContext(_registerModel);
    private async Task HandleRegistration()
    {
        var result = await _authService.Register(_registerModel);
        if (result.Successful)
        {
            Notification.NotificationShow("The Registration Is Completed Successfully", "success", "user");

            _navigationManager.NavigateTo("/login");
        }
        else
        {
            Notification.NotificationShow("The Registration Failed", "error", "lock");
            IndexValue = 0;
        }
    }
    #endregion
}