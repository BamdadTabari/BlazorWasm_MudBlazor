@implements IDisposable

<div>
    <TelerikBreadcrumb Data="@Items" Width="100%"></TelerikBreadcrumb>
</div>

@code {
    public List<BreadcrumbItem> Items { get; set; }

    //Create a handler that will be invoked on each location change
    private void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        var relativeLocation = _navigationManager.ToBaseRelativePath(e.Location);
        SetBreadcrumbs(relativeLocation);
    }
    //Bind the above handler to the NavigationManager's LocationChanged event
    protected override void OnInitialized()
    {
        _navigationManager.LocationChanged += OnLocationChanged;
        var relativeLocation = _navigationManager.ToBaseRelativePath(_navigationManager.Uri);

        //Set new breadcrumb items on each invocation
        SetBreadcrumbs(relativeLocation);

        base.OnInitialized();
    }
    //Sets new breadcrumbs based on the current URL. Called on initial page load as well as on every subsequent location change
    public void SetBreadcrumbs(string relativeLocation)
    {
        var newItems = new List<BreadcrumbItem>() { new BreadcrumbItem { Icon = "home", Url = _navigationManager.BaseUri } };

        var locationCrumbs = relativeLocation.Split('/');
        string url = _navigationManager.BaseUri;

        foreach (var crumb in locationCrumbs)
        {
            if (!string.IsNullOrEmpty(crumb))
            {
                url += crumb;
                newItems.Add(new BreadcrumbItem { Text = crumb, Url = url, Title = crumb });
                url += "/";
            }
        }

        Items = newItems;
        StateHasChanged();
    }
    void IDisposable.Dispose()
    {
        // Unsubscribe from the event when disposed
        _navigationManager.LocationChanged -= OnLocationChanged;
    }
    public class BreadcrumbItem
    {
        public string Text { get; set; }
        public string Url { get; set; }
        public string Title { get; set; }
        public string Icon { get; set; }
    }
}
